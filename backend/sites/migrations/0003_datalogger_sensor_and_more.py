# Generated by Django 5.2.7 on 2025-10-10 08:13

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('sites', '0002_alter_site_latitude_alter_site_longitude'),
    ]

    operations = [
        migrations.CreateModel(
            name='Datalogger',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('serial_number', models.CharField(max_length=100, unique=True)),
                ('model', models.CharField(max_length=100)),
                ('firmware_version', models.CharField(blank=True, max_length=50, null=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('maintenance', 'Maintenance'), ('error', 'Error')], default='active', max_length=20)),
                ('description', models.TextField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('installed_at', models.DateTimeField(auto_now_add=True)),
                ('last_communication', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('site', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dataloggers', to='sites.site')),
            ],
            options={
                'verbose_name': 'Datalogger',
                'verbose_name_plural': 'Dataloggers',
                'ordering': ['site__name', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Sensor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('sensor_type', models.CharField(choices=[('temperature', 'Temperature'), ('humidity', 'Humidity'), ('pressure', 'Pressure'), ('accelerometer', 'Accelerometer'), ('strain_gauge', 'Strain Gauge'), ('displacement', 'Displacement'), ('vibration', 'Vibration'), ('tilt', 'Tilt'), ('wind_speed', 'Wind Speed'), ('wind_direction', 'Wind Direction'), ('other', 'Other')], default='other', max_length=20)),
                ('channel', models.PositiveSmallIntegerField(help_text='Channel number on the datalogger')),
                ('unit_of_measure', models.CharField(blank=True, max_length=50, null=True)),
                ('min_value', models.DecimalField(blank=True, decimal_places=6, help_text='Minimum expected value', max_digits=15, null=True)),
                ('max_value', models.DecimalField(blank=True, decimal_places=6, help_text='Maximum expected value', max_digits=15, null=True)),
                ('calibration_factor', models.DecimalField(decimal_places=6, default=1.0, help_text='Calibration factor to apply to raw values', max_digits=15)),
                ('calibration_offset', models.DecimalField(decimal_places=6, default=0.0, help_text='Calibration offset to apply to raw values', max_digits=15)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('calibrating', 'Calibrating'), ('error', 'Error'), ('maintenance', 'Maintenance')], default='active', max_length=20)),
                ('description', models.TextField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('installed_at', models.DateTimeField(auto_now_add=True)),
                ('last_reading', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('datalogger', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sensors', to='sites.datalogger')),
            ],
            options={
                'verbose_name': 'Sensor',
                'verbose_name_plural': 'Sensors',
                'ordering': ['datalogger__site__name', 'datalogger__name', 'channel'],
            },
        ),
        migrations.AddIndex(
            model_name='datalogger',
            index=models.Index(fields=['site', 'status'], name='sites_datal_site_id_31bde5_idx'),
        ),
        migrations.AddIndex(
            model_name='datalogger',
            index=models.Index(fields=['serial_number'], name='sites_datal_serial__de86a4_idx'),
        ),
        migrations.AddIndex(
            model_name='datalogger',
            index=models.Index(fields=['is_active'], name='sites_datal_is_acti_53e05f_idx'),
        ),
        migrations.AddIndex(
            model_name='datalogger',
            index=models.Index(fields=['last_communication'], name='sites_datal_last_co_29328c_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='datalogger',
            unique_together={('site', 'name')},
        ),
        migrations.AddIndex(
            model_name='sensor',
            index=models.Index(fields=['datalogger', 'sensor_type'], name='sites_senso_datalog_0edbc1_idx'),
        ),
        migrations.AddIndex(
            model_name='sensor',
            index=models.Index(fields=['sensor_type'], name='sites_senso_sensor__a92c69_idx'),
        ),
        migrations.AddIndex(
            model_name='sensor',
            index=models.Index(fields=['status'], name='sites_senso_status_e007ec_idx'),
        ),
        migrations.AddIndex(
            model_name='sensor',
            index=models.Index(fields=['is_active'], name='sites_senso_is_acti_f9f1a0_idx'),
        ),
        migrations.AddIndex(
            model_name='sensor',
            index=models.Index(fields=['last_reading'], name='sites_senso_last_re_e81e07_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='sensor',
            unique_together={('datalogger', 'channel')},
        ),
    ]
