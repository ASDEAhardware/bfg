"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from datetime import timedelta

import os
from datetime import timedelta


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-&s%0j(121)s-qw($41%dpj2_q4bd&w0@!9&@lnvrnlw=8bltg3'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 'True') == 'True'

ALLOWED_HOSTS= [ 'backend', 'localhost', '127.0.0.1' ]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',
    'rest_framework.authtoken',
    'dj_rest_auth',
    #'dj_rest_auth.registration',  # Se vuoi usare la registrazione
    'django.contrib.sites',  # Necessario per alcune funzioni (come il reset password)
    'user',
    'corsheaders',
    'dashboard',]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',

    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases



# Configurazione database PostgreSQL



# Configurazione database PostgreSQL

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get('POSTGRES_DB'),
        'USER': os.environ.get('POSTGRES_USER'),
        'PASSWORD': os.environ.get('POSTGRES_PASSWORD'),
        'HOST': os.environ.get('POSTGRES_HOST'),
        'PORT': os.environ.get('POSTGRES_PORT'),
    }
}

# Config REST Framework
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'dj_rest_auth.jwt_auth.JWTCookieAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
}

AUTH_USER_MODEL = 'user.CustomUser'
STATIC_URL = '/static/'
MEDIA_ROOT = BASE_DIR / 'media'
MEDIA_URL = '/media/'

# Aggiungi CORS_ALLOWED_ORIGINS
CORS_ALLOWED_ORIGINS = [
    'http://localhost:3000',
    'http://127.0.0.1:3000',
]

CORS_ALLOW_CREDENTIALS = True  # Permette l'invio di cookie con CORS

CSRF_TRUSTED_ORIGINS = [
    'http://localhost:3000',
]

SIMPLE_JWT = {
    # Specifica l'algoritmo di firma
    "ALGORITHM": "RS256",

    # Carica la chiave privata per firmare i token
    "SIGNING_KEY": open(BASE_DIR / 'keys' / 'private.pem').read(),

    # Carica la chiave pubblica per verificare i token
    "VERIFYING_KEY": open(BASE_DIR / 'keys' / 'public.pem').read(),

    # Aggiungi un endpoint per la gestione del JWKS (opzionale, ma consigliato)
    # Questo non è nativamente supportato da simple_jwt, ma puoi implementarlo
    # come un'API custom su Django per Next.js
    # "JWKS_URI": "/api/auth/jwks/", # Esempio di URL per il JWK Set
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=5),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
    'JWT_AUTH_REFRESH_COOKIE_MAX_AGE': timedelta(days=1),
    "ROTATE_REFRESH_TOKENS": False,
    "BLACKLIST_AFTER_ROTATION": False,
    "AUTH_HEADER_TYPES": ("Bearer",),
}

REST_AUTH = {
    'USE_JWT': True,
    'JWT_AUTH_COOKIE': 'access_token',
    'JWT_AUTH_COOKIE_PATH': '/',
    'JWT_AUTH_HTTPONLY': False,  # L'access token NON deve essere HttpOnly per essere letto dal middleware
    'JWT_AUTH_SECURE': False,    # ⚠️ Imposta a True in produzione con HTTPS
    'JWT_AUTH_COOKIE_SAMESITE': 'Lax', # Consigliato per lo sviluppo, più permissivo di 'Strict'

    # Configurazione del Cookie per il Refresh Token
    'JWT_AUTH_REFRESH_COOKIE': 'refresh_token',  # Questo è il nome del cookie per il REFRESH TOKEN.
    'JWT_AUTH_REFRESH_COOKIE_PATH': '/',
    'JWT_AUTH_REFRESH_COOKIE_HTTP_ONLY': True,  # Il refresh token DEVE essere HttpOnly
    'JWT_AUTH_REFRESH_COOKIE_SECURE': False,    # ⚠️ Imposta a True in produzione con HTTPS
    'JWT_AUTH_REFRESH_COOKIE_SAMESITE': 'Lax',


    'LOGIN_SERIALIZER': 'dj_rest_auth.serializers.LoginSerializer',
    'TOKEN_SERIALIZER': 'dj_rest_auth.serializers.TokenSerializer',
    'JWT_SERIALIZER': 'dj_rest_auth.serializers.JWTSerializer', #Si occupa di impacchettare la risposta json in seguito a un login eseguito con successo, non del suo payload
    'JWT_SERIALIZER_WITH_EXPIRATION': 'dj_rest_auth.serializers.JWTSerializerWithExpiration', #Identico al precedente aggiungendo però informazioni sulla scadenza dei token
    'JWT_TOKEN_CLAIMS_SERIALIZER': 'user.serializers.MyTokenObtainPairSerializer', #Si occupa di serializzare il payload del token e di default si basa sul serializzatore di SimpleJWT
    'USER_DETAILS_SERIALIZER': 'user.serializers.CustomUserDetailsSerializer',
    'PASSWORD_RESET_SERIALIZER': 'dj_rest_auth.serializers.PasswordResetSerializer',
    'PASSWORD_RESET_CONFIRM_SERIALIZER': 'dj_rest_auth.serializers.PasswordResetConfirmSerializer',
    'PASSWORD_CHANGE_SERIALIZER': 'dj_rest_auth.serializers.PasswordChangeSerializer',

    'OLD_PASSWORD_FIELD_ENABLED': True,
    'LOGOUT_ON_PASSWORD_CHANGE': True,

    'TOKEN_MODEL': 'rest_framework.authtoken.models.Token',
    'TOKEN_CREATOR': 'dj_rest_auth.utils.default_create_token',
}

DEFAULT_DOMAIN = 'localhost:8000'  # Sostituisci con il tuo dominio reale

FRONTEND_URL = "http://localhost:3000"

DJANGO_REST_AUTH = {
    "PASSWORD_RESET_CONFIRM_URL": "reset-password/confirm?uid={uid}&token={token}",
    'PASSWORD_RESET_SHOW_EMAIL_NOT_FOUND': True,
    "USE_SITES": False,  # In quanto non usiamo il sistema di auth standard di django
    "DOMAIN": "localhost:8000", # Utile se utilizzi "USE_SITES": False
    "SITE_NAME": "LocalDev", # Utile se utilizzi "USE_SITES": False 
}

REST_AUTH_PASSWORD_RESET_SERIALIZER = 'user.serializers.CustomPasswordResetSerializer'

EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend' if DEBUG else 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = os.environ.get('EMAIL_HOST')  # SMTP server host
EMAIL_PORT = int(os.environ.get('EMAIL_PORT', 587))  # SMTP server port (587 for TLS, 465 for SSL)
EMAIL_USE_TLS = os.environ.get('EMAIL_USE_TLS', 'True') == 'True'  # True for TLS, False for SSL
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')  # SMTP server username
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')  # SMTP server password
EMAIL_USE_SSL = os.environ.get('EMAIL_USE_SSL', 'False') == 'False'  # Set to True if using SSL
DEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_FROM_EMAIL')  # Default sender email address !!!!#UNICO PARAMETRO UTILIZZATO IN FASE DI SVILUPPO IN QUANTO ABBIAMO smtp in console

SITE_ID = 1  # Necessario per dj-rest-auth
'''
SITE_ID = 1  # Necessario per dj-rest-auth, 
indica il sito predefinito per le operazioni di autenticazione e registrazione

SITE_ID = 1 -> è una variabile di configurazione usata da Django's "sites framework", ovvero il sistema django.contrib.sites.
Questo framework per siti multipli consente di gestire più domini o siti web all'interno della stessa istanza di Django.
Il valore 1 indica che il sito corrente è il primo sito registrato nel database.
 
dice a Django di usare il sito con ID 1 nella tabella django_site come sito corrente per:

    generare URL nei reset password/email verification

    identificare il dominio del sito corrente (utile in email o template)

    supportare app come django-allauth, dj-rest-auth, etc.

    !!!!Per modificare il link di reset password, puoi andare in tuo-sito/admin/sites/site/ e 
    modificare il campo "Domain name" per il sito con ID 1. (Questo avviene sempre per la possibilità di avere più siti, in 
    un'istanza Django, ognuno con il proprio dominio e configurazione.)	

''' 

