"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from datetime import timedelta

import os
from datetime import timedelta


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# LOGS dir and file
LOG_DIR = BASE_DIR.parent / "resources" / "logs"
LOG_DIR.mkdir(parents=True, exist_ok=True) # crea la dir solo se non esiste


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-&s%0j(121)s-qw($41%dpj2_q4bd&w0@!9&@lnvrnlw=8bltg3'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 'True') == 'True'

ALLOWED_HOSTS= [ 'backend', 'localhost', '127.0.0.1' ]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'rest_framework',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',
    'rest_framework.authtoken',
    'dj_rest_auth',
    #'dj_rest_auth.registration',  # Se vuoi usare la registrazione
    'user',
    'corsheaders',
    'dashboard',
    'mqtt',
    'sites.apps.SitesConfig',
]

MIDDLEWARE = [
    # CORS deve essere il primo
    'corsheaders.middleware.CorsMiddleware',

    # Security middleware personalizzati (prima di tutto)
    'core.middleware.SecurityMiddleware',
    'core.middleware.AuditMiddleware',

    # Django security middleware
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# Security settings avanzate
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = 'DENY'

# Produzione Security Headers
PRODUCTION = os.environ.get('PRODUCTION', 'False') == 'True'

if PRODUCTION:
    SECURE_SSL_REDIRECT = True
    SECURE_HSTS_SECONDS = 31536000  # 1 anno
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True

# Content Security Policy
CSP_DEFAULT_SRC = ("'self'",)
CSP_SCRIPT_SRC = ("'self'", "'unsafe-inline'")
CSP_STYLE_SRC = ("'self'", "'unsafe-inline'")
CSP_IMG_SRC = ("'self'", "data:")
CSP_CONNECT_SRC = ("'self'",)

# Rate Limiting e Throttling
RATELIMIT_ENABLE = True
RATELIMIT_USE_CACHE = 'default'

# Session Security
SESSION_COOKIE_AGE = 3600  # 1 ora
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SAMESITE = 'Strict' if PRODUCTION else 'Lax'

# CSRF Protection Enhanced
CSRF_COOKIE_HTTPONLY = True
CSRF_COOKIE_SAMESITE = 'Strict' if PRODUCTION else 'Lax'
CSRF_FAILURE_VIEW = 'core.views.csrf_failure'

# Password Security
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {'min_length': 12}
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Logging per sicurezza
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False, #serve a non disattivare i logger  predefiniti (come django.request e django.db.backends etc.), se fosse True dovresti riconfigurarli manualmente.
    'formatters': { # I formatter definiscono come appare il messaggio di log nel file o in console.
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'security': {
            'format': 'SECURITY {asctime} {name} {levelname} {message}',
            'style': '{',
        },
    },
    'handlers': { # Gli handler definiscono dove vanno scritti i log.
        'file': {
            'level': 'INFO',
            'class': 'logging.handlers.TimedRotatingFileHandler', # la precedente classe era: logging.FileHandler
            'filename': LOG_DIR / 'django.log',
            'formatter': 'verbose',
            'when': 'W0', # ogni quanto eseguire la rotazione dei file di log (in questo caso settimanalmente il lunedì)
            'backupCount': 7, # conserva solo gli ultimi 7 file, compreso quello corrente
            'encoding': 'utf-8'
        },
        'security': {
            'level': 'WARNING',
            'class': 'logging.handlers.TimedRotatingFileHandler', # la precedente classe era: logging.FileHandler
            'filename': LOG_DIR / 'security.log',
            'formatter': 'security',
            'when': 'W0',
            'backupCount': 15,      # conserva 15 giorni di log di sicurezza
            'encoding': 'utf-8',
        },
    },
    'loggers': { # I logger dicono quali moduli inviano messaggi e a quali handler.
        'django': { # Tutti i log generici del framework (come richieste e segnali) vanno al file django.log
            'handlers': ['file'],
            'level': 'INFO',
            'propagate': True,
        },
        'django.security': { # Log generati dal sistema di sicurezza di Django (es. login falliti, tentativi sospetti) e vanno nel file security.log
            'handlers': ['security'],
            'level': 'WARNING',
            'propagate': False, # propagate=False significa che questi log non risalgono ai logger “padri” (es. non finiscono anche in django.log
        },
        'django_ratelimit': { # log del pacchetto django_ratelimit, stessi degli handler ddi sicurezza
            'handlers': ['security'],
            'level': 'WARNING',
        },
    },
}

ROOT_URLCONF = 'config.urls'

# URL configuration
APPEND_SLASH = True  # Automatic redirect for missing trailing slash

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases



# Configurazione database PostgreSQL



# Configurazione database PostgreSQL

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get('POSTGRES_DB'),
        'USER': os.environ.get('POSTGRES_USER'),
        'PASSWORD': os.environ.get('POSTGRES_PASSWORD'),
        'HOST': os.environ.get('POSTGRES_HOST'),
        'PORT': os.environ.get('POSTGRES_PORT'),
    }
}

# Config REST Framework con throttling
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'dj_rest_auth.jwt_auth.JWTCookieAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle'
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': '100/hour',
        'user': '1000/hour',
        'login': '5/min',
        'sensitive': '10/min'
    },
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
    ],
    'EXCEPTION_HANDLER': 'core.exceptions.custom_exception_handler'
}

# Cache Configuration per rate limiting
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'unique-snowflake',
        'TIMEOUT': 300,
        'OPTIONS': {
            'MAX_ENTRIES': 1000,
            'CULL_FREQUENCY': 3,
        }
    }
}

# Rate Limiting Configuration
RATE_LIMIT_REQUESTS = 100  # richieste per finestra temporale
RATE_LIMIT_WINDOW = 300    # 5 minuti in secondi
MAX_REQUEST_SIZE = 10 * 1024 * 1024  # 10MB

AUTH_USER_MODEL = 'user.CustomUser'
STATIC_URL = '/static/'
MEDIA_ROOT = BASE_DIR / 'media'
MEDIA_URL = '/media/'

# Aggiungi CORS_ALLOWED_ORIGINS
CORS_ALLOWED_ORIGINS = [
    'http://localhost:3000',
    'http://127.0.0.1:3000',
]

CORS_ALLOW_CREDENTIALS = True  # Permette l'invio di cookie con CORS

CSRF_TRUSTED_ORIGINS = [
    'http://localhost:3000',
]

SIMPLE_JWT = {
    # Algoritmo di firma sicuro
    "ALGORITHM": "RS256",

    # Carica la chiave privata per firmare i token
    "SIGNING_KEY": open(BASE_DIR / 'keys' / 'private.pem').read(),

    # Carica la chiave pubblica per verificare i token
    "VERIFYING_KEY": open(BASE_DIR / 'keys' / 'public.pem').read(),

    # Token lifetimes ottimizzati per sicurezza
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=15),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),

    # Sicurezza avanzata - Rotazione token
    "ROTATE_REFRESH_TOKENS": True,
    "BLACKLIST_AFTER_ROTATION": True,
    "UPDATE_LAST_LOGIN": True,

    # Headers e validazione
    "AUTH_HEADER_TYPES": ("Bearer",),
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),

    # Claims personalizzati per audit
    "TOKEN_OBTAIN_SERIALIZER": "user.serializers.MyTokenObtainPairSerializer",

    # Validazione aggiuntiva
    "CHECK_REVOKE_TOKEN": True,
}

REST_AUTH = {
    'USE_JWT': True,

    # Access Token Cookie Configuration
    'JWT_AUTH_COOKIE': 'access_token',
    'JWT_AUTH_COOKIE_PATH': '/',
    'JWT_AUTH_HTTPONLY': False,  # Access token readable by JS per middleware
    'JWT_AUTH_SECURE': os.environ.get('DJANGO_SECURE_COOKIES', 'False') == 'True',
    'JWT_AUTH_COOKIE_SAMESITE': 'Strict' if os.environ.get('PRODUCTION', 'False') == 'True' else 'Lax',

    # Refresh Token Cookie Configuration (Massima Sicurezza)
    'JWT_AUTH_REFRESH_COOKIE': 'refresh_token',
    'JWT_AUTH_REFRESH_COOKIE_PATH': '/',
    'JWT_AUTH_REFRESH_COOKIE_HTTP_ONLY': True,  # HttpOnly per sicurezza
    'JWT_AUTH_REFRESH_COOKIE_SECURE': os.environ.get('DJANGO_SECURE_COOKIES', 'False') == 'True',
    'JWT_AUTH_REFRESH_COOKIE_SAMESITE': 'Strict' if os.environ.get('PRODUCTION', 'False') == 'True' else 'Lax',


    'LOGIN_SERIALIZER': 'dj_rest_auth.serializers.LoginSerializer',
    'TOKEN_SERIALIZER': 'dj_rest_auth.serializers.TokenSerializer',
    'JWT_SERIALIZER': 'dj_rest_auth.serializers.JWTSerializer', #Si occupa di impacchettare la risposta json in seguito a un login eseguito con successo, non del suo payload
    'JWT_SERIALIZER_WITH_EXPIRATION': 'dj_rest_auth.serializers.JWTSerializerWithExpiration', #Identico al precedente aggiungendo però informazioni sulla scadenza dei token
    'JWT_TOKEN_CLAIMS_SERIALIZER': 'user.serializers.MyTokenObtainPairSerializer', #Si occupa di serializzare il payload del token e di default si basa sul serializzatore di SimpleJWT
    'USER_DETAILS_SERIALIZER': 'user.serializers.CustomUserDetailsSerializer',
    'PASSWORD_RESET_SERIALIZER': 'dj_rest_auth.serializers.PasswordResetSerializer',
    'PASSWORD_RESET_CONFIRM_SERIALIZER': 'dj_rest_auth.serializers.PasswordResetConfirmSerializer',
    'PASSWORD_CHANGE_SERIALIZER': 'dj_rest_auth.serializers.PasswordChangeSerializer',

    'OLD_PASSWORD_FIELD_ENABLED': True,
    'LOGOUT_ON_PASSWORD_CHANGE': True,

    'TOKEN_MODEL': 'rest_framework.authtoken.models.Token',
    'TOKEN_CREATOR': 'dj_rest_auth.utils.default_create_token',
}

DEFAULT_DOMAIN = 'localhost:8000'  # Sostituisci con il tuo dominio reale

FRONTEND_URL = "http://localhost:3000"

DJANGO_REST_AUTH = {
    "PASSWORD_RESET_CONFIRM_URL": "reset-password/confirm?uid={uid}&token={token}",
    'PASSWORD_RESET_SHOW_EMAIL_NOT_FOUND': True,
    "USE_SITES": False,  # In quanto non usiamo il sistema di auth standard di django
    "DOMAIN": "localhost:8000", # Utile se utilizzi "USE_SITES": False
    "SITE_NAME": "LocalDev", # Utile se utilizzi "USE_SITES": False 
}

REST_AUTH_PASSWORD_RESET_SERIALIZER = 'user.serializers.CustomPasswordResetSerializer'

EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend' if DEBUG else 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = os.environ.get('EMAIL_HOST')  # SMTP server host
EMAIL_PORT = int(os.environ.get('EMAIL_PORT', 587))  # SMTP server port (587 for TLS, 465 for SSL)
EMAIL_USE_TLS = os.environ.get('EMAIL_USE_TLS', 'True') == 'True'  # True for TLS, False for SSL
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')  # SMTP server username
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')  # SMTP server password
EMAIL_USE_SSL = os.environ.get('EMAIL_USE_SSL', 'False') == 'False'  # Set to True if using SSL
DEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_FROM_EMAIL')  # Default sender email address !!!!#UNICO PARAMETRO UTILIZZATO IN FASE DI SVILUPPO IN QUANTO ABBIAMO smtp in console

'''
SITE_ID = 1  # Necessario per dj-rest-auth, 
indica il sito predefinito per le operazioni di autenticazione e registrazione

SITE_ID = 1 -> è una variabile di configurazione usata da Django's "sites framework", ovvero il sistema django.contrib.sites.
Questo framework per siti multipli consente di gestire più domini o siti web all'interno della stessa istanza di Django.
Il valore 1 indica che il sito corrente è il primo sito registrato nel database.
 
dice a Django di usare il sito con ID 1 nella tabella django_site come sito corrente per:

    generare URL nei reset password/email verification

    identificare il dominio del sito corrente (utile in email o template)

    supportare app come django-allauth, dj-rest-auth, etc.

    !!!!Per modificare il link di reset password, puoi andare in tuo-sito/admin/sites/site/ e 
    modificare il campo "Domain name" per il sito con ID 1. (Questo avviene sempre per la possibilità di avere più siti, in 
    un'istanza Django, ognuno con il proprio dominio e configurazione.)	

'''

SITE_ID = 1

# MQTT Configuration
MQTT_BROKER = os.environ.get('MQTT_BROKER', 'zionnode.ovh')
MQTT_PORT = int(os.environ.get('MQTT_PORT', 8883))
MQTT_USERNAME = os.environ.get('MQTT_USERNAME', 'msapp_dev')
MQTT_PASSWORD = os.environ.get('MQTT_PASSWORD', 'KJHdsfgb86!')

# MQTT Topics
MQTT_CONTROL_TOPIC = os.environ.get('MQTT_CONTROL_TOPIC', 'acquisition24/control')
MQTT_OUTPUT_TOPIC = os.environ.get('MQTT_OUTPUT_TOPIC', 'acquisition24/output')
MQTT_ERROR_TOPIC = os.environ.get('MQTT_ERROR_TOPIC', 'acquisition24/error')

# MQTT Client IDs
MQTT_CLIENT_ID = os.environ.get('MQTT_CLIENT_ID', 'msapp_output_sub')
MQTT_DATALOG_CLIENT_ID = os.environ.get('MQTT_DATALOG_CLIENT_ID', 'msapp_dev_python')
MQTT_OUTPUT_CLIENT_ID = os.environ.get('MQTT_OUTPUT_CLIENT_ID', 'msapp_output_sub')
MQTT_CONTROL_CLIENT_ID = os.environ.get('MQTT_CONTROL_CLIENT_ID', 'msapp_control_sub')
MQTT_ERROR_CLIENT_ID = os.environ.get('MQTT_ERROR_CLIENT_ID', 'msapp_error_sub')

